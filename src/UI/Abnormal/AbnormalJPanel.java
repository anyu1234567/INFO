/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.Abnormal;

import info5100.assignment4.model.Admin;
import info5100.assignment4.model.Person;
import info5100.assignment4.model.Residence;
import java.util.ArrayList;
import java.util.HashSet;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author An
 */
public class AbnormalJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AbnormalJPanel
     */
    Admin admin;
    JPanel userJPanel;
    public AbnormalJPanel(JPanel UserJPanel, Admin admin) {
        initComponents();
        this.admin =admin;
        this.userJPanel =UserJPanel;
        refreshCaseTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        CaseTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtPersonNum = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtAbnormal = new javax.swing.JTextField();

        CaseTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Community", "name", "blood Pressure", "age"
            }
        ));
        jScrollPane1.setViewportView(CaseTable1);

        jLabel1.setText("Person number");

        jLabel2.setText("Abnormal cose");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtPersonNum, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtAbnormal, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(93, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPersonNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtAbnormal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(260, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable CaseTable1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtAbnormal;
    private javax.swing.JTextField txtPersonNum;
    // End of variables declaration//GEN-END:variables

    private void refreshCaseTable() {
         int rowCount = CaseTable1.getRowCount();
        DefaultTableModel model = (DefaultTableModel) CaseTable1.getModel();
        for(int i=rowCount-1;i>=0;i--){
            model.removeRow(i);
        }
        HashSet<String> coms = new HashSet();
        ArrayList<Person> ps = admin.getPersonDirectory();
        int abnormalcase = 0;
        for (int i = 0 ;i < ps.size();i++) {
             Person p = ps.get(i);
             Residence residence = p.getResidence();
             String community = residence.getCommunity();
             if(!coms.contains(community)){
                 coms.add(community);
                 
                 for(int j = i ;j<ps.size();j++ ){
                     Person pj = ps.get(j);
                     if(pj.getBloodPressure()>90.00d&&pj.getBloodPressure()<140.00d)
                         continue;
                     if(pj.getResidence().getCommunity().equals(community)){
                        Object row[] = new Object[4];
                        row[0] = pj.getResidence().getCommunity();
                        row[1] = pj;
                        row[2] =pj.getBloodPressure()+" mmHg";
                        row[3] = pj.getAge();
                        model.addRow(row);  
                        abnormalcase++;
                     }
                 }
             }
        }
        txtPersonNum.setText(Integer.toString(ps.size()));
        txtAbnormal.setText(Integer.toString(abnormalcase));
    }
}
